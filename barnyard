#!/bin/bash

SCRIPT_DIR=$(cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd)

function barnyard_bash_resource() {
    awk '/^___ '$1' ___/{flag=1;next}/^___/{flag=0}flag' $0
}

function barnyard_temporary_directory() {
    [[ -n "$TMP" ]] && return
    TMP="$(mktemp -d)"
    BARNYARD_RM=("$TMP")
    trap barnyard_cleanup EXIT
}

function barnyard_cleanup() {
    for ((i=${#BARNYARD_RM[@]}-1; i>=0; i--)); do
        local file="${BARNYARD_RM[$i]}"
        if [[ -e "$file" ]]; then
            if [[ -d "$file" ]]; then
                rmdir "$file"
            else
                rm "$file"
            fi
        fi
    done
}

function barnyard_github_go_release_install() {
    local uri=$1

    local base="${uri##*/}"
    # TODO A more wicked regex would catch exactly what we can extract.
    regex='(.*)_v[0-9]+\.[0-9]+'
    [[ "$base" =~ $regex ]] || abend cannot_determine_program_name
    local program="${BASH_REMATCH[1]}"

    if [[ ! -e "/usr/local/bin/$program" ]]; then
        barnyard_temporary_directory
        local file="$TMP/github-$(date +%s).tar.gz"
        BARNYARD_RM+=("$file")
        curl -Ls -o "$file" "$uri"
        echo "$file" "${base%.*.*}"
        local tag="${base%.*.*}"
        tar xf "$file" "$tag/$program" -O | sudo tee "/usr/local/bin/$program" > /dev/null
        sudo chmod +x "/usr/local/bin/$program"
    fi
}

function barnyard_join() {
  local d=${1-} f=${2-}
  if shift 2; then
    printf %s "$f" "${@/#/$d}"
  fi
}

function barnyard_read_config() {
    declare -n __array="$1"
    local config=$2 regex='^([^=]+)=(.*)$'
    while read -r line; do
        [[ "$line" =~ $regex ]] || abend bad_config "$config"
        local name="${BASH_REMATCH[1]}" value="${BASH_REMATCH[2]}"
        __array["$name"]="$value"
    done < "$config"
}

function run_modules() {
    declare -A o_barnyard

    o_barnyard[hostname]=$(hostname --long)
    barnyard_read_config o_barnyard /etc/barnyard/config

    if [[ -z "${o_barnyard[barnyard]}" ]]; then
        o_barnyard[barnyard]=/var/barnyard/repository
    fi

    o_barnyard[git]="git -C ${o_barnyard[barnyard]}"
    if [[ -n "${o_barnyard[owner]}" ]]; then
        o_barnyard[git]="su ${o_barnyard[owner]} ${o_barnyard[git]}"
    fi

    ${o_barnyard[git]} checkout -q "${o_barnyard[branch]}"

    GIT_SSH_COMMAND='ssh -i /etc/barnyard/id_barnyard -o IdentitiesOnly=yes' ${o_barnyard[git]} pull -q origin "$branch"

    local current=()
    if [[ -e "/var/barnyard/sha1/${o_barnyard[hostname]}" ]]; then
        local sha1=$(<"/var/barnyard/sha1/${o_barnyard[hostname]}")
        IFS=' ' read -a current <<< "$(${o_barnyard[git]} log -n 1 --format='%H %at %GF' "$sha1")"
    fi

    declare -A when
    checkout=()
    if [[ "${#current[@]}" -eq 0 ]]; then
        while read -r line; do
            IFS=' ' read -a fields <<< "$line"
            if [[ "${fields[2]}" == "${o_barnyard[fingerprint]}" ]]; then
                checkout=("${fields[@]}")
                break
            fi
        done < <(${o_barnyard[git]} log --format='%H %at %GF')
    else
        while read -r line; do
            IFS=' ' read -a fields <<< "$line"
            if [[ "${fields[2]}" == "${o_barnyard[fingerprint]}" && ${fields[1]} -gt ${current[1]} ]]; then
                checkout=("${fields[@]}")
                break
            fi
            if [[ "${fields[0]}" == "${current[0]}" ]]; then
                break
            fi
        done < <(${o_barnyard[git]} log --format='%H %at %GF')
    fi

    machine="${o_barnyard[barnyard]}/machines/${o_barnyard[hostname]}"
    modules="${o_barnyard[barnyard]}/modules"

    while read -r func; do
        export -f "$func"
    done < <(sed -n 's/^function \(barnyard_.*\)() {$/\1/p' $0)

    export -f log
    export -f abend

    # https://stackoverflow.com/a/21941473

    if [[ "${#checkout[@]}" -ne 0 ]]; then
        barnyard_temporary_directory
        BARNYARD_RM+=("$TMP/.run")
        BARNYARD_RM+=("$TMP/.run.env")
        barnyard_bash_resource barnyard_run > "$TMP/.run"
        ${o_barnyard[git]} checkout -q "${checkout[0]}"
        for module in $(ls "$machine"); do
            o_barnyard[module]="$module"
            declare -p o_barnyard > "$TMP/.run.env"
            bash -c ". $TMP/.run.env; . $TMP/.run"
            [[ $? -ne 0 ]] && exit 1
        done
        mkdir -p "/var/barnyard/sha1"
        echo "${checkout[0]}" > "/var/barnyard/sha1/${o_barnyard[hostname]}"
    fi
}

function abend() {
    log priority=3 "$@"
    exit 1
}

SALT=a5bbeb04f50fcdee70b0b5976438a8d8

function log() {
    declare -A PRIORITY

    PRIORITY[panic]=0
    PRIORITY[alert]=1
    PRIORITY[crit]=2
    PRIORITY[err]=3
    PRIORITY[warn]=4
    PRIORITY[notice]=5
    PRIORITY[info]=6
    PRIORITY[debug]=7

    function _join_by() {
      local d=${1-} f=${2-}
      if shift 2; then
        printf %s "$f" "${@/#/$d}"
      fi
    }

    local priority
    if [[ -z "${PRIORITY["$1"]}" ]]; then
        priority=info
    else
        priority="$1"
        shift
    fi

    declare -a journald syslog
    local name value regex='^([^=]+)=(.*)$'
    while true; do
        echo "> $1"
        if [[ "$1" =~ $regex ]]; then
            name="${BASH_REMATCH[1]}" value="${BASH_REMATCH[2]}"
            journald+=("${name^^}=${value}")
            syslog+=("${name}=${value}")
            if [[ "$name" == priority ]]; then
                priority=$value
            fi
            shift
        else
            break
        fi
    done

    local format="$1" message
    shift
    message=$(printf "$format\n" "$@")

    local context=''
    if [[ ${#syslog[@]} -ne 0 ]]; then
        context="; $(_join_by ', ' "${syslog[@]}")"
    fi

    echo "$(date --rfc-3339=s | sed 's/+.*//') barnyard[info]: $message$context"

    local id
    id=$(echo "$SALT" "$format" | md5sum | cut -d' ' -f1)

    journald+=("MESSAGE_ID=$id" "MESSAGE=$message" PRIORITY=${PRIORITY[$priority]} SYSLOG_FACILITY=1)
    echo "$(_join_by $'\n' "${journald[@]}")" | logger --journald
}

run_modules

exit

___ barnyard_run ___

function run() {
    if [[ -e "/var/barnyard/applied/${o_barnyard[module]}" ]]; then
        echo alredy applied "${o_barnyard[module]}"
        return
    else
        echo applying "${o_barnyard[module]}"
    fi

#    export -f log abend

    declare -A o_module
    barnyard_read_config o_module "${o_barnyard[barnyard]}/machines/${o_barnyard[hostname]}/${o_barnyard[module]}"

    mkdir -p /var/barnyard/applied

    if [[ -n "${o_module[dependencies]}" ]]; then
        for depdendency in "${o_module[dependencies]}"; do
            echo "have dependencies $depdendency"
            exit 1
        done
    fi

    . "${o_barnyard[barnyard]}/modules/${o_barnyard[module]}/apply"
    [[ $? -ne 0 ]] && { echo 'bad run'; exit 1; }

    echo "marked applied ${o_barnyard[module]}"
    ${o_barnyard[git]} log -n 1 --format='%H %at %GF' > "/var/barnyard/applied/${o_barnyard[module]}"
}

run

___
