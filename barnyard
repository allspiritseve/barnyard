#!/bin/bash

# TODO Cannot remember all that I wanted to do with property names, but it seems
# like all I need are the directives and based64 encoding. Maybe include is
# something like `@/modules/postgresql/common`.
# TODO Argument parser `f,fingerprint@` would be an array return.
SCRIPT_DIR=$(cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd)

function barnyard_bash_resource() {
    awk '/^___ '$1' ___/{flag=1;next}/^___/{flag=0}flag' "$SCRIPT_DIR/barnyard"
}

function barnyard_cleanup() {
    rm -rf "$BARNYARD_TEMP"
}

function barnyard_temporary_directory() {
    [[ -n "$BARNYARD_TEMP" ]] && return
    BARNYARD_TEMP="$(mktemp -d)"
    export BARNYARD_TEMP
    trap barnyard_cleanup EXIT
}

function barnyard_join_by() {
    local d=${1-} f=${2-}
    if shift 2; then
        printf %s "$f" "${@/#/$d}"
    fi
}

function barnyard_write_config() {
    declare -n __map="$1"
    local file="$2"
    shift 2
    declare -a fields
    for key in "${!__map[@]}"; do
        fields+=("${key}=${__map[$key]}")
    done
    barnyard_join_by $'\n' "${fields[@]}" > "$file"
}

function barnyard_read_config() {
    declare -n __array="$1"
    local config=$2 regex='^([^=]+)=(.*)$'
    while read -r line; do
        [[ "$line" =~ $regex ]] || abend bad_config "$config"
        local name="${BASH_REMATCH[1]}" value="${BASH_REMATCH[2]}"
        __array["$name"]="$value"
    done < "$config"
}

function barnyard_parse_arguments() {
    declare -n __array="$1"
    shift
    local regex='^([^=]+)=(.*)$'
    while [[ $# -ne 0 ]]; do
        [[ "$1" =~ $regex ]] || abend bad_argument "$1"
        shift
        local name="${BASH_REMATCH[1]}" value="${BASH_REMATCH[2]}"
        __array["$name"]="$value"
    done
}

function abend() {
    log priority=3 "$@"
    exit 1
}

function log() {
    SALT=a5bbeb04f50fcdee70b0b5976438a8d8

    function _log() {

        local priority
        if [[ -z "${PRIORITY["$1"]}" ]]; then
            priority=info
        else
            priority="$1"
            shift
        fi

        declare -a journald syslog
        local name value regex='^([^=]+)=(.*)$'
        while true; do
            if [[ "$1" =~ $regex ]]; then
                name="${BASH_REMATCH[1]}" value="${BASH_REMATCH[2]}"
                journald+=("${name^^}=${value}")
                syslog+=("${name}=${value}")
                if [[ "$name" == priority ]]; then
                    priority=$value
                fi
                shift
            else
                break
            fi
        done

        if [[ "$priority" -gt "${PRIORITY[$BARNYARD_LOG_LEVEL]}" ]]; then
            return
        fi

        local format="$1" message
        shift
        message=$(printf "$format\n" "$@")

        local context=''
        if [[ ${#syslog[@]} -ne 0 ]]; then
            context="; $(barnyard_join_by ', ' "${syslog[@]}")"
        fi

        echo "$(date --rfc-3339=s | sed 's/+.*//') barnyard[info]: $message$context"

        local id
        id=$(echo "$SALT" "$format" | md5sum | cut -d' ' -f1)

        journald+=("MESSAGE_ID=$id" "MESSAGE=$message" PRIORITY=${PRIORITY[$priority]} SYSLOG_FACILITY=1)
        echo "$(barnyard_join_by $'\n' "${journald[@]}")" | logger --journald
    }
    local module
    if [[ -n "${o_barnyard[module]}" ]]; then
        _log module="${o_barnyard[module]}" "$@"
    else
        _log "$@"
    fi
}

function barnyard_divider() {
    local label="$1"
    local bar=--------------------------------------------------------------------------------
    shift
    local prefix="------- $label "
    echo "$bar"
    echo "$prefix ${bar:0:$(( ${#bar} - ${#prefix} - 1 ))}"
    echo "$bar"
}

function barnyard_quotedoc() {
    local heredoc spaces=65536 leading='^( +)([^[:space:]])' IFS='' dedented
    declare -a lines
    while read -r line; do
        lines+=("$line")
        if [[ "$line" =~ $leading ]]; then
            if [[ "${#BASH_REMATCH[1]}" -lt "$spaces" ]]; then
                spaces="${#BASH_REMATCH[1]}"
            fi
        else
            echo miss
        fi
    done < /dev/stdin
    read -r -d '' dedented < <(printf "%s\n" "${lines[@]}" | sed -E 's/^ {'$spaces'}//')
    eval "$({
        echo "cat <<EOF"
        echo -n "$dedented"
        echo "EOF"
    })"
}

function run() {
    local module="$1"
    shift

    local configuration="${o_barnyard[barnyard]}/machines/${o_barnyard[hostname]}/${module}"
    [[ -e "$configuration" ]] || abend no_configuration_for_module "$module"
    declare -A o_module
    o_barnyard[_run]=once
    barnyard_read_config o_module "$configuration"

    if [[ "${o_barnyard[stage]}" = production ]]; then
        if [[ -n "${o_module[_dependencies]}" ]]; then
            declare -a dependencies
            read -r -a dependencies <<< "${o_module[_dependencies]}"
            for dependency in "${dependencies[@]}"; do
                if [[ -z "${seen[$module]}" ]]; then
                    log info module="$module" depdendency="$dependency" "applying dependency %s for module %s" "${dependency}" "${module}"
                    run "$dependency"
                fi
            done
        fi
    fi

    [[ -n "${seen[$module]}" ]] && return || seen["$module"]=0

    mkdir -p /var/barnyard/applied

    if [[ "${o_barnyard[stage]}" = production ]]; then
        case "${o_module[_run]}" in
            once )
                if [[ -e "/var/barnyard/applied/${module}" ]]; then
                    log module="$module" "already applied module %s" "${module}"
                    return 0
                fi
                ;;
            diff )
                if [[ -e "/var/barnyard/applied/${module}" ]]; then
                    declare application
                    read -r -a application < "/var/barnyard/applied/${module}"
                    if ${o_registers[git]} diff --quiet "${application[0]}"; then
                        log module="$module" "already applied module %s" "${module}"
                        return 0
                    fi
                    log module="$module" "module %s has changed, re-applying" "${module}"
                fi
                ;;
            explicit )
                log module="$module" "module % run set to explicit, skipping" "${module}"
                return 0
                ;;
        esac
    fi

    mkdir -p "$BARNYARD_TEMP/runs/$module"

    if [[ "${o_barnyard[stage]}" = production ]]; then
        ${o_registers[git]} archive "${o_registers[checkout]}" modules | tar -C "$BARNYARD_TEMP/runs/$module" -x
    else
        cp -R "${o_barnyard[barnyard]}/modules" "$BARNYARD_TEMP/runs/$module"
    fi

    o_barnyard[module]="$module"
    barnyard_write_config o_barnyard "$BARNYARD_TEMP/barnyard/o_barnyard"
    bash "$BARNYARD_TEMP/barnyard/run"
    local code=$?
    [[ $code -ne 0 ]] && abend 'module %s exited %d' "${module}" $code
    o_barnyard[module]=''

    if [[ "${o_barnyard[stage]}" = production ]]; then
        log module="$module" "marking module %s as applied" "${module}"
        ${o_registers[git]} log -n 1 --format='%H %at %GF' "${checkout}" > "/var/barnyard/applied/${module}"
    fi
}

function loop_modules() {
    while read -r func; do
        export -f "$func"
    done < <(sed -n 's/^function \(barnyard_.*\)() {$/\1/p' "$SCRIPT_DIR/barnyard")

    export -f log abend

    mkdir -p "/var/barnyard/sha1"

    barnyard_temporary_directory

    mkdir -p "$BARNYARD_TEMP/barnyard"
    mkdir -p "$BARNYARD_TEMP/modules"

    barnyard_bash_resource barnyard_run > "$BARNYARD_TEMP/barnyard/run"
    barnyard_write_config PRIORITY "$BARNYARD_TEMP/barnyard/PRIORITY"

    declare -A seen

    for module in "$@"; do run "$module"; done
}

function main() {
    declare -A PRIORITY

    PRIORITY[panic]=0
    PRIORITY[alert]=1
    PRIORITY[crit]=2
    PRIORITY[err]=3
    PRIORITY[warn]=4
    PRIORITY[notice]=5
    PRIORITY[info]=6
    PRIORITY[debug]=7

    if [[ -n "$BARNYARD_LOG_LEVEL" ]]; then
        [[ -z "${PRIORITY[$BARNYARD_LOG_LEVEL]}" ]] && abend "invalid log level %s" "$BARNYARD_LOG_LEVEL"
    else
        BARNYARD_LOG_LEVEL=info
    fi

    # An environment variable so someone can set this in their shell.
    export BARNYARD_LOG_LEVEL

    declare -A o_barnyard o_registers

    o_barnyard[hostname]=$(hostname --long)
    barnyard_read_config o_barnyard /etc/barnyard/config

    if [[ -z "${o_barnyard[barnyard]}" ]]; then
        o_barnyard[barnyard]=/var/barnyard/repository
    fi

    barnyard_parse_arguments o_registers "$@"

    if [[ -n "${o_registers[develop]}" || -n "${o_registers[modules]}" ]]; then
        [[ -n "$SUDO_USER" ]] || abend must_run_develop_through_sudo
        [[ -n "${o_registers[develop]}" ]] && o_barnyard[barnyard]="$(readlink -f "${o_registers[develop]}")"
        [[ -n "${o_registers[modules]}" ]] || o_register[modules]=''
        [[ -e "${o_barnyard[barnyard]}" ]] || abend barnyard_does_not_exist "${o_barnyard[barnyard]}"
        [[ $(stat -c '%U' "${o_barnyard[barnyard]}/.git/index") == $SUDO_USER ]] || \
            abend sudo_user_does_not_own "$SUDO_USER" "${o_barnyard[barnyard]}"
        declare -a modules
        o_registers[git]="sudo -u $SUDO_USER git -C $(printf %q ${o_barnyard[barnyard]})"
        IFS=' ' read -a modules <<< "${o_registers[modules]}"
        o_barnyard[stage]=development
        loop_modules "${modules[@]}"
    else
        export GIT_SSH_COMMAND='ssh -i /etc/barnyard/id_barnyard -o IdentitiesOnly=yes'
        o_registers[git]="git -C $(printf %q ${o_barnyard[barnyard]})"
        ${o_registers[git]} checkout -q "${o_barnyard[branch]}"
        ${o_registers[git]} pull -q origin "$branch"
        declare -a current
        local sha1
        if [[ -e "/var/barnyard/sha1/${o_barnyard[hostname]}" ]]; then
            sha1=$(<"/var/barnyard/sha1/${o_barnyard[hostname]}")
            IFS=' ' read -a current <<< "$(${o_registers[git]} log -n 1 --format='%H %at %GF' "$sha1")"
        fi

        if [[ "${#current[@]}" -eq 0 ]]; then
            while read -r line; do
                IFS=' ' read -a fields <<< "$line"
                if [[ "${fields[2]}" == "${o_barnyard[fingerprint]}" ]]; then
                    checkout=("${fields[@]}")
                    break
                fi
            done < <(${o_registers[git]} log --format='%H %at %GF')
        else
            while read -r line; do
                IFS=' ' read -a fields <<< "$line"
                if [[ "${fields[2]}" == "${o_barnyard[fingerprint]}" && ${fields[1]} -gt ${current[1]} ]]; then
                    checkout=("${fields[@]}")
                    break
                fi
                if [[ "${fields[0]}" == "${current[0]}" ]]; then
                    break
                fi
            done < <(${o_registers[git]} log --format='%H %at %GF')
        fi

        # https://stackoverflow.com/a/21941473
        if [[ "${#checkout[@]}" -ne 0 ]]; then
            o_registers[checkout]="${checkout[0]}"
            o_barnyard[stage]=production

            declare -a modules
            mapfile -t modules <<< "$(ls "${o_barnyard[barnyard]}/machines/${o_barnyard[hostname]}")"
            loop_modules "${modules[@]}"

            echo "${checkout[0]}" > "/var/barnyard/sha1/${o_barnyard[hostname]}"
        fi
    fi
}

main "$@"

exit

___ barnyard_run ___

function main() {
    declare -A PRIORITY o_barnyard o_module
    barnyard_read_config PRIORITY "$BARNYARD_TEMP/barnyard/PRIORITY"
    barnyard_read_config o_barnyard "$BARNYARD_TEMP/barnyard/o_barnyard"
    barnyard_read_config o_module "${o_barnyard[barnyard]}/machines/${o_barnyard[hostname]}/${o_barnyard[module]}"
    . "$BARNYARD_TEMP/runs/${o_barnyard[module]}/modules/${o_barnyard[module]}/apply.bash"
}

main
___
