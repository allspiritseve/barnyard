#!/usr/bin/env zsh

# For the readme...
#
# * You can get the actual module using `_module`, while `module` is the name.
# * `o_barnyard[barnyard]` is the repository and `o_barnyard[archive]` is the
# directory where we extracted the barnyard version.

#

# Now I want the ability to export the barnyard functions.
#
# This means `barnyard apply`, `barnyard funcs`, `barnyard whever`.
#
# But we don't want to get into serious argument parsing, do we?

___() {
}

# TODO Cannot remember all that I wanted to do with property names, but it seems
# like all I need are the directives and based64 encoding. Maybe include is
# something like `@/modules/postgresql/common`.
export BARNYARD_PATH=${${0:a}%/*}

VERSION=$(zsh $BARNYARD_PATH/barnctl version)

zsh_parse_arguments() {
    local error=${${1:-}:q} context=${${2:-}:q}
    shift 2

    # TODO -hfoo will become $o_help and then set -- foo
    typeset -A arguments declared localized arg
    local regex short long remainder

    while :
    do
        case "$1" in
            # Indicates send of parser arguments.
            -- )
                shift
                break
                ;;
            # Parse program arguments.
            * )
                # Check for a variable name or else we'll generate an `o_` prefixed one.
                if [[ "$1" =~ ^([^,]+)=(.*)$ ]]; then
                    arg[variable]="$match[1]"
                    pattern="$match[2]"
                else
                    arg[variable]=
                    pattern="$1"
                fi

                shift

                regex='^([a-zA-Z0-9]{0,2}),([^%@:#!]*)([%@:#!]?)(.*)$'
                [[ "$pattern" =~ $regex ]] || { print -R "error definition ${1:q}"; return; }
                short=${match[1]} long=${match[2]} arg[kind]=${match[3]} arg[remainder]="${match[4]}"

                [[ -z "$arg[variable]" ]] && {
                    [[ -z "$long" ]] && arg[variable]=o_$short || arg[variable]=o_${long:gs/-/_/}
                }

                case "x$arg[kind]" in
                    x@ )
                        arg[type_flag]=' -a'
                        arg[type_name]='array-local'
                        ;;
                    x% )
                        arg[type_flag]=' -A'
                        arg[type_name]='association-local'
                        [[ -z "$arg[remainder]" ]] && arg[remainder]==
                        ;;
                    * )
                        arg[type_flag]=' '
                        arg[type_name]='scalar-local'
                        ;;
                esac

                [[ -n "$long" ]] && arguments[--${long}]="${(@qq)${(@kv)arg}}"
                [[ -n "$short" ]] && arguments[-${short}]="${(@qq)${(@kv)arg}}"

                [[ "declared[$arg[variable]]" = 1 ]] && continue
                case x"$arg[kind]" in
                    x | x\! | x\# )
                        printf '{ [[ ! -v %s ]] || [[ "${(t)%s}" != "scalar-local" ]] } && local %s\n' \
                            "$arg[variable]" "$arg[variable]" "$arg[variable]"
                        case "x$arg[kind]" in
                            x | x\# )
                                printf '%s=0\n' "$arg[variable]"
                                ;;
                            * )
                                printf '%s=1\n' "$arg[variable]"
                                ;;
                        esac
                        ;;
                esac
                declared[$arg[variable]]=1
                ;;
        esac
    done

    typeset -a args=( "$@" ) split
    local i=1 arged flag negated delimiter
    while (( i <= ${#args[@]} )); do
        negated=0
        case "${args[$i]}" in
            - )
                break
                ;;
            -- )
                let i=i+1
                break
                ;;
            --no-* )
                regex='^--no-([a-zA-Z0-9][-a-zA-Z0-9]*)$'
                if [[ "${args[$i]}" =~ $regex ]] && [[ -n "${arguments[--$match[1]]}" ]]; then
                    arg=( "${(@Q)${(@z)${arguments[--$match[1]]}}}" )
                    if [[ $arg[kind] == '!' ]]; then
                        args[$i]="--${match[1]}"
                        negated=1
                    fi
                fi
                ;&
            --* )
                arged=0
                regex='^(--[-a-zA-Z0-9]+)(=.*)?$'
                [[ "${args[$i]}" =~ $regex ]] || { print -R "$error $context unknown ${1:q}"; return; }
                long="${match[1]}"
                if [[ "$match[2]" != '' ]]; then
                    arged=1
                    args[i]=${match[2]:1}
                else
                    ((i++))
                fi
                flag=$long
                [[ -z "${arguments[$long]}" ]] && { print -R "$error $context unknown ${long:q}"; return; }
                arg=( "${(@Q)${(@z)${arguments[$long]}}}" )
                ;;
            -* )
                arged=0
                # NB Oh, it's one or for an array, but for strings we start from zero. I see.
                flag=${args[$i]:0:2}
                [[ -z "${arguments[$flag]}" ]] && { print -R "$error $context unknown ${flag:q}"; return; }
                eval "${arguments[$flag]}"
                case "x$arg[kind]" in
                    x: | x@ )
                        if [[ ${#args[$i]} -eq 2 ]]; then
                            let i=i+1
                        else
                            args[i]=${args[$i]:2}
                        fi
                        ;;
                    * )
                        # TODO If you have args a b and c and you get -abd what
                        # does getopt do? Seems to just append...
                        if [[ ${#args[i]} -gt 2 ]]; then
                            args[i]="-${args[i]:2}"
                        else
                            ((i++))
                        fi
                        [[ "$arg[kind]" = '!' ]] && negated=1
                        ;;
                esac
                ;;
            *)
                break
                ;;
        esac
        case "x$arg[kind]" in
            x | x\# | x\! )
                # TODO `printf`
                (( $arged )) && { print -R "$error $context no_args ${flag:q}"; return; }
                ;;
        esac
        case "x$arg[kind]" in
            x )
                printf 'local %s=1\n' "$arg[variable]"
                ;;
            x\# )
                printf '((%s++))\n' "$arg[variable]"
                ;;
            x\! )
                if (( $negated )); then
                    printf '%s=0\n' "$arg[variable]"
                else
                    printf '%s=1\n' "$arg[variable]"
                fi
                ;;
            * )
                (( i <= ${#args[@]} )) || { print -R "$error $context arg_missing ${flag:q}"; return; }
                if [[ "$localized[$arg[variable]]" != 1 ]]; then
                    printf '{ [[ ! -v %s ]] || [[ "${(t)%s}" != %s ]] } && typeset%s %s\n' \
                        "$arg[variable]" "$arg[variable]" \
                        "$arg[type_name]" "$arg[type_flag]" "$arg[variable]"
                fi
                case "x$arg[kind]" in
                    x: )
                        printf '%s=%s\n' "$arg[variable]" "${args[$i]:q}"
                        ((i++))
                        ;;
                    * )
                        [[ "$localized[$arg[variable]]" != 1 ]] && printf '%s=()\n' "$arg[variable]"
                        case "x$arg[kind]" in
                            x@ )
                                printf '%s+=(%s)\n' "$arg[variable]" "${args[$i]:q}"
                                ((i++))
                                ;;
                            x% )
                                delimiter=$arg[remainder]
                                split=("${(@ps:$delimiter:)args[2]}")
                                if (( ${#split[@]} == 1 )); then
                                    (( i + 1 <= ${#args[@]} )) || {
                                        print -R "$error $context arg_missing ${flag:q}"; return;
                                    }
                                    printf '%s+=(%s %s)\n' "$arg[variable]" "${args[$i]:q}" "${args[$i+1]:q}"
                                    ((i+=2))
                                else
                                    printf '%s+=(%s %s)\n' "$arg[variable]" \
                                        "${split[1]:q}" "${(pj:$delimiter:)${(@)split[2,-1]}}"
                                    ((i++))
                                fi
                                ;;
                        esac
                        ;;
                esac
                localized[$arg[variable]]=1
                ;;
            * )
        esac
    done

    (( i ==  ${#args[@]} + 1 )) && printf 'set --\n' || printf 'set -- %s\n' "${(j: :)${(@)args[$i,-1]:q}}"
}

barnyard_argument_error() {
    local cmd=${1:-} kind=${2:-}
    shift 2
    cmd=${${cmd/#root/barnyard}//_/ }
    case "$kind" in
        arg_missing )
            abend 'missing argument `%s` to `%s`' "$1" "$cmd"
            ;;
        * )
            print -u 2 -R "$cmd" "$kind" "$@"
            ;;
    esac
    exit 1
}

barnyard_parse_arguments() {
    zsh_parse_arguments barnyard_argument_error "$@"
    printf "(( \$o_help )) && usage_$1\n"
}

# Note that the pattern excludes any function names ending in `_`.
IFS=$'\n' read -d '' -r -A BARNCTL_COMMANDS < <( \
    sed -n 's/^command_\(barnyard_.*[^_]\)() {$/\1/p' "$BARNYARD_PATH/barnyard" \
)

barnyard_next_command() {
    local prefix=${1:-} func
    shift
    if (( ! $# )); then
        abend '`%s` expects a command argument' "${prefix//_/ }"
    fi
    local cmd=${1:-}
    shift
    for func in "${BARNCTL_COMMANDS[@]}"; do
        if [[ "$func" = "${prefix}_${cmd}" ]]; then
            "command_$func" "$@"
            return
        fi
    done
    func="${prefix}_${cmd}"
    abend 'no such command `%s`' ${${func/#root/barnyard}//_/ }
}

barnyard_cleanup() {
    [[ -n "$BARNYARD_TEMP" ]] && rm -rf "$BARNYARD_TEMP"
}

barnyard_temporary_directory() {
    [[ -n "$BARNYARD_TEMP" ]] && return
    BARNYARD_TEMP="$(mktemp -d)"
    export BARNYARD_TEMP
}

trap barnyard_cleanup EXIT

___ barnyard_common ___
typeset -A PRIORITY

PRIORITY[panic]=0
PRIORITY[alert]=1
PRIORITY[crit]=2
PRIORITY[err]=3
PRIORITY[warn]=4
PRIORITY[notice]=5
PRIORITY[info]=6
PRIORITY[debug]=7

if [[ -n "$BARNYARD_LOG_LEVEL" ]]; then
    [[ -z "${PRIORITY[$BARNYARD_LOG_LEVEL]}" ]] && abend "invalid log level %s" "$BARNYARD_LOG_LEVEL"
else
    BARNYARD_LOG_LEVEL=info
fi

# An environment variable so someone can set this in their shell.
export BARNYARD_LOG_LEVEL

barnyard_string_resource() {
    awk '/^___ '$1' ___/{flag=1;next}/^___/{flag=0}flag' "$BARNYARD_PATH/barnyard"
}

barnyard_write_config() {
    local map=${1:-} file=${2:-}
    declare -a fields
    for key value in "${(@kv)${(P)map}}"; do
        fields+=("${key}=${value}")
    done
    print "${(j:\n:)fields}" > "$file"
}

barnyard_get_array() {
    [[ -n "${${(P)1}[$2]}" ]] && : ${(PA)3::=${(@Q)${(@z)${(P)1}[$2]}}}
}

barnyard_get_array_redux() {
    if [[ -n "${${(P)1}[$2]}" ]]; then
        : ${(PA)3::=${(@Q)${(@z)${(P)1}[$2]}}}
    else
        local empty=()
        : ${(PA)3::=${empty[@]}}
    fi
}

barnyard_read_config_() {
    local file=${2:-} regex='^([^+=]+)(\+?=)(.*)$' line
    shift 2
    while [[ $# -ne 0 ]]; do
        barnyard_read_config[$1]=${2:-}
        shift 2
    done
    typeset -a array
    while read -r line; do
        [[ "$line" =~ $regex ]] || abend bad_config "$config"
        local key=$match[1] element_type=$match[2] value=$match[3]
        case "$element_type" in
            += )
                if (( ${+barnyard_read_config[$key]} )); then
                    array=("${(@Q)${(@z)barnyard_read_config[$key]}}")
                else
                    array=()
                fi
                array+=("$value")
                barnyard_read_config[$key]="${(@qq)${array[@]}}"
                ;;
            = )
                barnyard_read_config[$key]="$value"
                ;;
        esac
    done < "$file"
}

barnyard_read_config() {
    [[ $(( $# % 2 )) == 0 ]] || abend bad_argument_count
    declare -A barnyard_read_config
    barnyard_read_config_ "$@"
    : ${(PA)${1:-reply}::=${(@kv)barnyard_read_config}}
}

abend() {
    log priority=err "$@"
    exit 1
}

log() {
    SALT=a5bbeb04f50fcdee70b0b5976438a8d8

    local priority level
    if [[ -z "${PRIORITY[$1]-}" ]]; then
        priority=info
    else
        priority="$1"
        shift
    fi


    declare -a journald syslog
    local name value regex='^([^=]+)=(.*)$'
    while true; do
        if [[ "$1" =~ $regex ]]; then
            name="${match[1]}" value="${match[2]}"
            journald+=("${name:u}=${value}")
            syslog+=("${name}=${value}")
            if [[ "$name" == priority ]]; then
                priority=$value
            fi
            shift
        else
            break
        fi
    done

    if [[ -n "${o_barnyard[module]}" ]]; then
        journald+=("MODULE=${o_barnyard[module]}")
        syslog+=("module=${o_barnyard[module]}")
    fi

    level=$PRIORITY[$priority]

    if (set +u; [[ "$priority" -gt "${PRIORITY[$BARNYARD_LOG_LEVEL]}" ]]); then
        return
    fi

    local format="$1" message
    shift
    message=$(printf "$format\n" "$@")

    local context=''
    if [[ ${#syslog[@]} -ne 0 ]]; then
        context="; ${(j:, :)syslog}"
    fi

    if ! (( $o_barnyard[quiet] )); then
        print -R "$(date --rfc-3339=s | sed 's/+.*//') barnyard[$priority]: $message$context"
    fi

    local id
    id=$(print -R "$SALT" "$format" | md5sum | cut -d' ' -f1)

    journald+=("MESSAGE_ID=$id" "MESSAGE=$message" PRIORITY=$level SYSLOG_FACILITY=1)
    print "${(j:\n:)journald}" | logger --journald
}

barnyard_display() {
    if [[ -z "$o_barnyard[quiet]" ]]; then
        cat /dev/stdin 2>&1
    else
        cat /dev/stdin > /dev/null
    fi
}

barnyard_divider() {
    (( $o_barnyard[quiet] )) && return
    local label="$1"
    local bar=--------------------------------------------------------------------------------
    shift
    local prefix="------- $label "
    print -R "$bar"
    print -R "$prefix ${bar:0:$(( ${#bar} - ${#prefix} - 1 ))}"
    print -R "$bar"
}

barnyard_quotedoc() {
    local heredoc spaces=65536 leading='^( *)([^[:space:]])' IFS='' dedented
    declare -a lines
    while read -r line; do
        lines+=("$line")
        if [[ "$line" =~ $leading ]]; then
            if [[ "${#match[1]}" -lt "$spaces" ]]; then
                spaces="${#match[1]}"
            fi
        fi
    done < /dev/stdin
    read -r -d '' dedented < <(printf "%s\n" "${lines[@]}" | sed -E 's/^ {'$spaces'}//')
    eval "$({
        print -R "cat <<EOF"
        print -R -n "$dedented"
        print -R "EOF"
    })"
}

barnyard_run_() {
    typeset -A o_module barnyard
    typeset -a applied diffs
    typeset module program code

    barnyard=( "${(@kv)o_barnyard}" )

    while (( $# )); do
        module=${1:-}
        shift
        program=${module#*/}
        module=${module%/*}
        [[ $program = $module ]] && program=apply.zsh

        # ERROR Now we are stomping the parent context when we run `barnyard_always`.
        barnyard[configuration]="$barnyard[archive]/machines/$barnyard[hostname]/$module"
        barnyard[resources]="$barnyard[archive]/resources/$barnyard[hostname]"
        barnyard[age]="$(<"$barnyard[archive]/age/$barnyard[hostname]")" || \
            abend module=$module hostname="$barnyard[hostname]" 'age key missing for $%s' "$barnyard[hostname]"

        o_module=()

        [[ -e "$barnyard[configuration]" ]] || abend 'no configuration for module %s' "$module"
        barnyard_read_config o_module "$barnyard[configuration]" _apply once _module "$module"

        mkdir -p /var/lib/barnyard/applied


        applied=()
        diffs=()

        case "$o_registers[always]-$o_module[_apply]" in
            yes-* | *-always )
                log module="$module" program="$program" 'module %s run set to always, applying' "$module"
                ;;
            *-once )
                if [[ -e "/var/lib/barnyard/applied/$module" ]]; then
                    log module="$module" program="$program" "already applied module %s" "$module"
                    return 0
                fi
                ;;
            *-diff )
                if [[ -e "/var/lib/barnyard/applied/$module" ]]; then
                    read -r -A applied < "/var/lib/barnyard/applied/$module"
                    if [[ "$applied[1]" = "$barnyard[sha1]" ]]; then
                        log module="$module" program="$program" "already applied module %s" "$module"
                        return 0
                    fi
                    barnyard_get_array o_module _diff diffs
                    diffs+=("machines/$barnyard[hostname]/$module")
                    if git -C "$o_registers[repository]" diff --quiet "$applied[1]" "$barnyard[sha1]" -- "${diffs[@]}"; then
                        log module="$module" program="$program" "module %s has not changed, skipping" "$module"
                        return 0
                    fi
                    log module="$module" program="$program" "module %s has changed, re-applying" "$module"
                fi
                ;;
            *-never )
                log module="$module" program="$program" "module % run set to never, skipping" "$module"
                return 0
                ;;
        esac

        barnyard[module]="$module"
        export __BARNYARD_O_BARNYARD__="${(@qq)${(@kv)barnyard}}"
        export __BARNYARD_O_MODULE__="${(@qq)${(@kv)o_module}}"
        zsh "$BARNYARD_TEMP/apply" "${barnyard[archive]}/modules/$o_module[_module]/$program"
        code=$?
        (( $code )) && abend code=$code module="$module" 'module %s exited %d' "$module" $code

        if [[
            "$o_registers[repository]" = /var/lib/barnyard/repository && \
            "$program" = apply.zsh && \
            "$o_registers[always]" = no \
        ]]; then
            mkdir -p /var/lib/barnyard/applied
            log module="$module" "marking module %s as applied" "$module"
            git -C "$o_registers[repository]" log -n 1 --format='%H %at' "$barnyard[sha1]" > "/var/lib/barnyard/applied/$module"
        fi
    done
}
___
barnyard_version_check() {
    [[ -v o_version ]] && {
        [[ "$o_version" = "$VERSION" ]] || abend "local=$o_version" remote=$VERSION 'version mismatch, please run upgrade'
    }
}

barnyard_clone() {
    barnyard_temporary_directory

    mkdir -p "$BARNYARD_TEMP/barnyard"
    mkdir -p "$BARNYARD_TEMP/modules"

    barnyard_string_resource barnyard_apply > "$BARNYARD_TEMP/apply"

    mkdir -p "$BARNYARD_TEMP/run"
    if [[ "$o_registers[repository]" == /var/lib/barnyard/repository ]]; then
        git -C "$o_registers[repository]" archive "${o_barnyard[sha1]}" | tar -C "$BARNYARD_TEMP/run" -x
    else
        cp -R "$o_registers[repository]"/* "$BARNYARD_TEMP/run"
    fi

    o_barnyard[archive]="$BARNYARD_TEMP/run"
}

barnyard_order_modules() {
    mkdir -p "/var/lib/barnyard/sha1"
    typeset -A ordered o_module o_program
    typeset -a unordered
    typeset configuration operation module program
    for module in "$@"; do
        configuration="machines/$o_barnyard[hostname]/$module"
        [[ -e "$o_barnyard[archive]/$configuration" ]] || abend 'no configuration for module %s' "$module"
        o_module=()
        barnyard_read_config o_module "$o_barnyard[archive]/$configuration" _apply once
        if [[ "$o_module[_order]" ]]; then
            ordered[$module]="$o_module[_order]"
        else
            unordered+=("$module")
        fi
    done

    typeset -a in_order
    in_order=(${(f)"$(sort -k1n,2 <(for module order in "${(@kv)ordered}"; do echo "$order $module"; done) | cut -d' ' -f2)"})
    in_order+=("${unordered[@]}")

    log info modules="${(j: :)in_order[@]}" 'running modules in order' "${(j: :)in_order[@]}"

    barnyard_run_ "${(@)modules}"
}

barnyard_apply() {
    typeset -a modules=( "$@" )

    [[ -e /etc/barnyard/config ]] || abend 'barnyard not installed'
    typeset -A o_barnyard
    barnyard_read_config o_barnyard /etc/barnyard/config hostname "$(hostname --long)" quiet $o_quiet

    if [[ "$o_registers[repository]" = "/var/lib/barnyard/repository" ]]; then
        export GNUPGHOME=/etc/barnyard/gnupg
        export GIT_SSH_COMMAND='ssh -i /etc/barnyard/id_barnyard -o IdentitiesOnly=yes -o UserKnownHostsFile=/etc/barnyard/known_hosts'

        if [[ -e "/var/lib/barnyard/sha1/$o_barnyard[hostname]" ]]; then
            o_barnyard[sha1]=$(<"/var/lib/barnyard/sha1/$o_barnyard[hostname]")
        fi
    else
        [[ -n "$SUDO_USER" ]] || abend 'must run through sudo'
        [[ -e "$o_registers[repository]" ]] || abend 'no barnyard at path %s' "${o_registers[repository]:q}"

        local barnyard_user
        barnyard_user=$(stat -c '%U' "${o_registers[repository]}/.git/index") || abend 'not a git repo %s' "$o_registers[repository]"

        [[ "$barnyard_user" == $SUDO_USER ]] || abend 'sudo user %s does not own %s' "$SUDO_USER" "${o_registers[repository]:q}"
    fi

    barnyard_version_check

    if [[ "$o_registers[repository]" == /var/lib/barnyard/repository ]]; then
        # We also include the date stamp so that we don't apply a commit that
        # got out of order due to a rebase or merge. Barnyards really ought to
        # be linear and automated, though.

        local sha1
        typeset -a current
        if [[ -n "$o_barnyard[sha1]" ]]; then
            read -r -A current <<< "$(git -C ${o_registers[repository]} log -n 1 --format='%H %at' "$o_barnyard[sha1]")"
        fi

        if (( ${#modules[@]} )); then
            checkout=( "$current[1]" )
        else
            git -C "${o_registers[repository]}" fetch
            git -C "${o_registers[repository]}" checkout -q "${o_barnyard[branch]}"
            git -C "${o_registers[repository]}" pull -q origin "${o_barnyard[branch]}"

            if (( ${#current[@]} )); then
                while read -r line; do
                    IFS=' ' read -A fields <<< "$line"
                    if [[ "${fields[3]}" == G && ${fields[2]} -gt ${current[2]} ]]; then
                        checkout=("${fields[@]}")
                        break
                    fi
                    if [[ "${fields[1]}" == "${current[1]}" ]]; then
                        break
                    fi
                done < <(git -C "${o_registers[repository]}" log --format='%H %at %G?')
            else
                while read -r line; do
                    read -r -A fields <<< "$line"
                    if [[ "${fields[3]}" == G ]]; then
                        checkout=("${fields[@]}")
                        break
                    fi
                done < <(git -C "${o_registers[repository]}" log --format='%H %at %G?')
            fi
        fi

        # https://stackoverflow.com/a/21941473
        if (( ${#checkout[@]} )); then
            o_barnyard[sha1]="${checkout[1]}"

            if ! (( ${#modules[@]} )); then
                local list="$(ls "${o_registers[repository]}/machines/${o_barnyard[hostname]}")"
                modules=("${(@f)list}")
            fi


            barnyard_clone run
            if [[ $o_registers[always] = yes ]]; then
                barnyard_run_ "${(@)in_order}"
            else
                barnyard_order_modules "${modules[@]}"
            fi

            echo "${checkout[1]}" > "/var/lib/barnyard/sha1/${o_barnyard[hostname]}"
        fi
    else
        barnyard_clone run
        o_barnyard[foo]=
        barnyard_run_ "${(@)modules}"
    fi
}

command_barnyard_always() {
    local o_barnyard=/var/lib/barnyard/repository
    eval "$(barnyard_parse_arguments apply v,version: o_repository=b,barnyard: q,quiet h,help -- "$@")"
    typeset -A o_registers=( always yes repository "$(readlink -f "$o_repository")" )
    barnyard_apply "$@"
}

command_barnyard_apply() {
    eval "$(barnyard_parse_arguments apply v,version: q,quiet h,help -- "$@")"
    (( ${#@} )) && abend 'barnyard apply takes no positional arguments'
    typeset -A o_registers=( always no repository /var/lib/barnyard/repository )
    barnyard_apply "$@"
}

# Could argue that the repository should never change, but it comes from outside
# and so yes, it could change. You might want to rename your repository, why
# not? It's not immutable like the age or gpg key.

command_barnyard_clone() {
    eval "$(barnyard_parse_arguments clone v,version: h,help -- "$@")"

   export GIT_SSH_COMMAND='ssh -i /etc/barnyard/id_barnyard -o IdentitiesOnly=yes -o UserKnownHostsFile=/etc/barnyard/known_hosts'

    barnyard_version_check

    (( $# )) || abend 'a git repository url is required'
    local repository=${1:-}

    [[ -e /etc/barnyard/id_barnyard ]] || abend 'no barnyard ssh key'

    rm -rf /var/lib/barnyard/repository

    git clone -q "${repository%#*}" /var/lib/barnyard/repository || abend 'unable to clone repository %s' "$repository"

    local branch="${repository##*#}"
    if [[ -z "$branch" ]]; then
        branch=$(git rev-parse --abbrev-ref HEAD) || abend 'unable to determin branch for %s' "$repository"
    else
        git -C /var/lib/barnyard/repository checkout  "$branch" || abend 'unable to checkout branch %s' "$branch"
    fi

    print -R "branch=$branch" > /etc/barnyard/config
}

command_barnyard_commit() {
    eval "$(barnyard_parse_arguments apply v,version: h,help -- "$@")"
    barnyard_version_check
    ( cd /var/lib/barnyard/commit && tar -czf - * | base64 )
}

# Here we add a gpg key. We also need a function to remove a key. We could use
# a Barnyard module to remove a key, but then the user has to have one, write
# one and if a key was compromised they'd want to remove it without running
# Barnyard, because Barnyard could not be trusted until the key was revoked.

command_barnyard_gpg_import() {
    eval "$(barnyard_parse_arguments gpg_import v,version: h,help -- "$@")"

    barnyard_version_check

    (( $EUID == 0 )) || abend 'must be run as root'

    (( $# )) || abend 'a file name is required'

    export GNUPGHOME=/etc/barnyard/gnupg

    local filename=${1:-} gpg_key
    if [[ "$filename" = - ]]; then
        filename=/dev/stdin
    fi
    gpg_key=$(< "$filename") || abend 'unable to read gpg key'

    local fingerprint=$( \
        print -R "$gpg_key" | \
            gpg --with-colons --import-options show-only --import --fingerprint 2>/dev/null | \
            awk -F: '/^fpr/ { print $10; exit }' \
    )

    gpg --import <(print -R "$gpg_key") > /dev/null 2>&1 || abend 'unable to import key'
    gpg --batch --yes --sign-key "$fingerprint" > /dev/null 2>&1 || abend 'unable to sign key'
    gpg --list-keys
}

command_barnyard_gpg() {
    eval "$(barnyard_parse_arguments gpg "h,help" -- "$@")"
    barnyard_next_command barnyard_gpg "$@"
}

barnyard_install_age() {
    cd "$BARNYARD_TEMP"
    curl -sLO https://github.com/FiloSottile/age/releases/download/v1.0.0/age-v1.0.0-linux-amd64.tar.gz
    tar zxf age-v1.0.0-linux-amd64.tar.gz
    find .
    install -m 755 age/age /usr/local/bin/age
    install -m 755 age/age-keygen /usr/local/bin/age-keygen
    age --version
}

command_barnyard_prepare() {
    eval "$(barnyard_parse_arguments prepare h,help -- "$@")"
    barnyard_divider 'check gpg'
    gpg --version
    barnyard_divider 'check git'
    git --version
    barnyard_divider 'install age'
    barnyard_temporary_directory
    (barnyard_install_age)
    barnyard_divider 'check age'
    age --version
    barnyard_divider 'check age-keygen'
    age-keygen --version
    barnyard_divider 'generate age key'
    mkdir -p /etc/barnyard
    if [[ ! -e /etc/barnyard/age ]]; then
        age-keygen -o /etc/barnyard/age
    fi
    mkdir -p /var/lib/barnyard/commit/age
    grep '^# public key: ' /etc/barnyard/age | sed 's/# public key: //' | tee /var/lib/barnyard/commit/age/$(hostname --long)
    barnyard_divider 'generate root private key'
    ( umask 077 && mkdir -p /etc/barnyard/gnupg )
    export GNUPGHOME=/etc/barnyard/gnupg
    barnyard_quotedoc <<'    EOF' > "$BARNYARD_TEMP/key_details"
        %echo Generating a basic OpenPGP key
        Key-Type: RSA
        Key-Length: 2048
        Subkey-Type: RSA
        Subkey-Length: 2048
        Name-Real: $(hostname --long)
        Name-Comment: Root Personal Key
        Name-Email: user@$(hostname --long)
        Expire-Date: 0
        %no-ask-passphrase
        %no-protection
        # Do a commit here, so that we can later print "done" :-)
        %commit
        %echo done
    EOF
    if ! gpg --list-keys $(hostname --long); then
        gpg --verbose --batch --gen-key "$BARNYARD_TEMP/key_details"
    fi
    gpg --list-keys
}

# We could transfer this age encrypted, but we assume it is comming from
# `barnctl` over SSH or at the very least from a file on the filesystem of the
# host machine.

command_barnyard_ssh_known-hosts() {
    eval "$(barnyard_parse_arguments ssh_known-hosts v,version: h,help -- "$@")"

    barnyard_version_check

    (( $EUID == 0 )) || abend 'must be run as root'

    (( $# )) || abend 'a file name is required'

    local filename=${1:-} gpg_key
    if [[ "$filename" = - ]]; then
        filename=/dev/stdin
    fi

    rm -f /etc/barnyard/id_barnyard

    cat "$filename" > /etc/barnyard/known_hosts

    cat /etc/barnyard/known_hosts
}

command_barnyard_ssh_private-key() {
    eval "$(barnyard_parse_arguments ssh_private-key v,version: h,help -- "$@")"

    barnyard_version_check

    (( $EUID == 0 )) || abend 'must be run as root'

    (( $# )) || abend 'a file name is required'

    local filename=${1:-} gpg_key
    if [[ "$filename" = - ]]; then
        filename=/dev/stdin
    fi

    rm -f /etc/barnyard/id_barnyard

    umask 077
    cat "$filename" > /etc/barnyard/id_barnyard

    ssh-keygen -lf /etc/barnyard/id_barnyard
}

command_barnyard_ssh() {
    eval "$(barnyard_parse_arguments ssh h,help -- "$@")"
    barnyard_next_command barnyard_ssh "$@"
}

command_barnyard_version() {
    eval "$(barnyard_parse_arguments version h,help -- "$@")"
    print -R "$VERSION"
}

main() {
    eval "$(barnyard_parse_arguments barnyard h,help -- "$@")"
    barnyard_next_command barnyard "$@"
}

main "$@"

exit
___ barnyard_apply ___
source <(awk '/^___ barnyard_common ___/{flag=1;next}/^___/{flag=0}flag' "$BARNYARD_PATH/barnyard")

typeset -A o_barnyard=( "${(@Q)${(@z)__BARNYARD_O_BARNYARD__}}" ) o_module=( "${(@Q)${(@z)__BARNYARD_O_MODULE__}}" )
unset __BARNYARD_O_BARNYARD__ __BARNYARD_O_MODULE__

barnyard_always() {
    typeset -A o_registers=( always yes )
    barnyard_run_ "$@"
}

cd "$o_barnyard[archive]"

source "$1"
___
