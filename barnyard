#!/usr/bin/env zsh

VERSION=0.1.0

___() {
}

# TODO Cannot remember all that I wanted to do with property names, but it seems
# like all I need are the directives and based64 encoding. Maybe include is
# something like `@/modules/postgresql/common`.
SCRIPT_DIR=${${0:a}%/*}

barnyard_cleanup() {
    [[ -n "$BARNYARD_TEMP" ]] && rm -rf "$BARNYARD_TEMP"
}

barnyard_temporary_directory() {
    [[ -n "$BARNYARD_TEMP" ]] && return
    BARNYARD_TEMP="$(mktemp -d)"
    export BARNYARD_TEMP
}

trap barnyard_cleanup EXIT

___ barnyard_common ___

barnyard_bash_resource() {
    awk '/^___ '$1' ___/{flag=1;next}/^___/{flag=0}flag' "$SCRIPT_DIR/barnyard"
}

barnyard_write_config() {
    local map=${1:-} file=${2:-}
    declare -a fields
    for key value in "${(@kv)${(P)map}}"; do
        fields+=("${key}=${value}")
    done
    print "${(j:\n:)fields}" > "$file"
}

barnyard_read_config_() {
    local file=${2:-} regex='^([^=]+)=(.*)$' line
    shift 2
    while [[ $# -ne 0 ]]; do
        barnyard_read_config[$1]=${2:-}
        shift 2
    done
    while read -r line; do
        [[ "$line" =~ $regex ]] || abend bad_config "$config"
        local key=$match[1] value=$match[2]
        barnyard_read_config[$key]="$value"
    done < "$file"
}

barnyard_read_config() {
    [[ $(( $# % 2 )) == 0 ]] || abend bad_argument_count
    declare -A barnyard_read_config
    barnyard_read_config_ "$@"
    : ${(PA)${1:-reply}::=${(@kv)barnyard_read_config}}
}

barnyard_parse_arguments_() {
    shift
    local regex='^([^=]+)=(.*)$'
    while [[ $# -ne 0 ]]; do
        [[ "$1" =~ $regex ]] || abend bad_argument "$1"
        shift
        barnyard_parse_arguments+=("$match[1]" "$match[2]")
    done
}

barnyard_parse_arguments() {
    declare -a barnyard_parse_arguments
    barnyard_parse_arguments_ "$@"
    : ${(PA)${1:-reply}::=${(@kv)barnyard_parse_arguments}}
}

abend() {
    log priority=err "$@"
    exit 1
}

log() {
    SALT=a5bbeb04f50fcdee70b0b5976438a8d8

    _log() {
        local priority
        if [[ -z "${PRIORITY[$1]}" ]]; then
            priority=info
        else
            priority="$1"
            shift
        fi

        declare -a journald syslog
        local name value regex='^([^=]+)=(.*)$'
        while true; do
            if [[ "$1" =~ $regex ]]; then
                name="${match[1]}" value="${match[2]}"
                journald+=("${name:u}=${value}")
                syslog+=("${name}=${value}")
                if [[ "$name" == priority ]]; then
                    priority=$value
                fi
                shift
            else
                break
            fi
        done

        priority=$PRIORITY[$priority]

        if [[ "$priority" -gt "${PRIORITY[$BARNYARD_LOG_LEVEL]}" ]]; then
            return
        fi

        local format="$1" message
        shift
        message=$(printf "$format\n" "$@")

        local context=''
        if [[ ${#syslog[@]} -ne 0 ]]; then
            context="; ${(j:, :)syslog}"
        fi

        echo "$(date --rfc-3339=s | sed 's/+.*//') barnyard[info]: $message$context"

        local id
        id=$(echo "$SALT" "$format" | md5sum | cut -d' ' -f1)

        journald+=("MESSAGE_ID=$id" "MESSAGE=$message" PRIORITY=$priority SYSLOG_FACILITY=1)
        print "${(j:\n:)journald}" | logger --journald
    }

    local module
    if [[ -n "${o_barnyard[module]}" ]]; then
        _log module="${o_barnyard[module]}" "$@"
    else
        _log "$@"
    fi
}

barnyard_divider() {
    local label="$1"
    local bar=--------------------------------------------------------------------------------
    shift
    local prefix="------- $label "
    echo "$bar"
    echo "$prefix ${bar:0:$(( ${#bar} - ${#prefix} - 1 ))}"
    echo "$bar"
}

barnyard_quotedoc() {
    local heredoc spaces=65536 leading='^( +)([^[:space:]])' IFS='' dedented
    declare -a lines
    while read -r line; do
        lines+=("$line")
        if [[ "$line" =~ $leading ]]; then
            if [[ "${#BASH_REMATCH[1]}" -lt "$spaces" ]]; then
                spaces="${#BASH_REMATCH[1]}"
            fi
        else
            echo miss
        fi
    done < /dev/stdin
    read -r -d '' dedented < <(printf "%s\n" "${lines[@]}" | sed -E 's/^ {'$spaces'}//')
    eval "$({
        echo "cat <<EOF"
        echo -n "$dedented"
        echo "EOF"
    })"
}

___

run() {
    local module="$1"
    shift

    local configuration="${o_registers[barnyard]}/machines/${o_barnyard[hostname]}/${module}"
    [[ -e "$configuration" ]] || abend no_configuration_for_module "$module"
    declare -A o_module
    barnyard_read_config o_module "$configuration" _apply once

    if [[ "${o_barnyard[stage]}" == production ]]; then
        if [[ -n "${o_module[_dependencies]}" ]]; then
            declare -a dependencies
            read -r -A dependencies <<< "${o_module[_dependencies]}"
            for dependency in "${dependencies[@]}"; do
                if [[ -z "${seen[$module]}" ]]; then
                    log info module="$module" depdendency="$dependency" "applying dependency %s for module %s" "${dependency}" "${module}"
                    run "$dependency"
                fi
            done
        fi
    fi

    [[ -n "${seen[$module]}" ]] && return || seen[$module]=0

    mkdir -p /var/lib/barnyard/applied

    if [[ "${o_barnyard[stage]}" == production ]]; then
        case "${o_module[_apply]}" in
            once )
                if [[ -e "/var/lib/barnyard/applied/${module}" ]]; then
                    log module="$module" "already applied module %s" "${module}"
                    return 0
                fi
                ;;
            diff )
                if [[ -e "/var/lib/barnyard/applied/${module}" ]]; then
                    declare application
                    read -r -A application < "/var/lib/barnyard/applied/${module}"
                    if git -C "${o_registers[barnyard]}" diff --quiet "${application[1]}"; then
                        log module="$module" "already applied module %s" "${module}"
                        return 0
                    fi
                    log module="$module" "module %s has changed, re-applying" "${module}"
                fi
                ;;
            never )
                log module="$module" "module % run set to never, skipping" "${module}"
                return 0
                ;;
        esac
    fi

    mkdir -p "$BARNYARD_TEMP/runs/$module"

    rm -rf "$BARNYARD_TEMP/tmp"
    mkdir -p "$BARNYARD_TEMP/tmp"
    o_barnyard[tmp]="$BARNYARD_TEMP/tmp"

    if [[ "${o_barnyard[stage]}" == production ]]; then
        git -C "${o_registers[barnyard]}" archive "${o_registers[checkout]}" | tar -C "$BARNYARD_TEMP/runs/$module" -x
        o_barnyard[barnyard]="$BARNYARD_TEMP/runs/$module"
    else
        cp -R "${o_registers[barnyard]}" "$BARNYARD_TEMP/runs/$module"
    fi

    o_barnyard[module]="$module"
    local foo=o_barnyard
    barnyard_write_config o_barnyard "$BARNYARD_TEMP/barnyard/o_barnyard"
    zsh "$BARNYARD_TEMP/barnyard/run" "$SCRIPT_DIR/barnyard"
    local code=$?
    [[ $code -ne 0 ]] && abend 'module %s exited %d' "${module}" $code
    o_barnyard[module]=''

    if [[ "${o_barnyard[stage]}" == production ]]; then
        log module="$module" "marking module %s as applied" "${module}"
        git -C "${o_registers[barnyard]}" log -n 1 --format='%H %at %GF' "${o_registers[checkout]}" > "/var/lib/barnyard/applied/${module}"
    fi
}

loop_modules() {
    mkdir -p "/var/lib/barnyard/sha1"

    barnyard_temporary_directory

    mkdir -p "$BARNYARD_TEMP/barnyard"
    mkdir -p "$BARNYARD_TEMP/modules"

    barnyard_bash_resource barnyard_run > "$BARNYARD_TEMP/barnyard/run"
    barnyard_write_config PRIORITY "$BARNYARD_TEMP/barnyard/PRIORITY"

    declare -A seen

    for module in "$@"; do run "$module"; done
}

main() {
    declare -A PRIORITY

    PRIORITY[panic]=0
    PRIORITY[alert]=1
    PRIORITY[crit]=2
    PRIORITY[err]=3
    PRIORITY[warn]=4
    PRIORITY[notice]=5
    PRIORITY[info]=6
    PRIORITY[debug]=7

    if [[ -n "$BARNYARD_LOG_LEVEL" ]]; then
        [[ -z "${PRIORITY[$BARNYARD_LOG_LEVEL]}" ]] && abend "invalid log level %s" "$BARNYARD_LOG_LEVEL"
    else
        BARNYARD_LOG_LEVEL=info
    fi

    # An environment variable so someone can set this in their shell.
    export BARNYARD_LOG_LEVEL

    declare -A o_barnyard o_registers
    barnyard_read_config o_barnyard /etc/barnyard/config hostname "$(hostname --long)"

    if [[ -z "${o_barnyard[barnyard]}" ]]; then
        o_barnyard[barnyard]=/var/lib/barnyard/repository
    fi

    barnyard_parse_arguments o_registers "$@"

    if [[ -n "$o_registers[develop]" || -n "$o_registers[modules]" ]]; then
        [[ -n "$SUDO_USER" ]] || abend must_run_develop_through_sudo
        [[ -n "$o_registers[develop]" ]] && o_barnyard[barnyard]="$(readlink -f "${o_registers[develop]}")"
        [[ -n "${o_registers[modules]}" ]] || o_register[modules]=''
        [[ -e "${o_barnyard[barnyard]}" ]] || abend barnyard_does_not_exist "${o_barnyard[barnyard]}"
        [[ $(stat -c '%U' "${o_barnyard[barnyard]}/.git/index") == $SUDO_USER ]] || \
            abend sudo_user_does_not_own "$SUDO_USER" "${o_barnyard[barnyard]}"
        declare -a modules
        o_registers[git]="sudo -u $SUDO_USER git -C $(printf %q ${o_barnyard[barnyard]})"
        IFS=' ' read -A modules <<< "${o_registers[modules]}"
        o_barnyard[stage]=development
        o_registers[barnyard]="${o_barnyard[barnyard]}"
        loop_modules "${modules[@]}"
    else
        o_registers[barnyard]="${o_barnyard[barnyard]}"
        export GIT_SSH_COMMAND='ssh -i /etc/barnyard/id_barnyard -o IdentitiesOnly=yes'
        o_registers[git]="git -C $(printf %q ${o_registers[barnyard]})"
        git -C "${o_registers[barnyard]}" checkout -q "${o_barnyard[branch]}"
        git -C "${o_registers[barnyard]}" pull -q origin "$branch"
        declare -a current
        local sha1
        if [[ -e "/var/lib/barnyard/sha1/${o_barnyard[hostname]}" ]]; then
            sha1=$(<"/var/lib/barnyard/sha1/${o_barnyard[hostname]}")
            IFS=' ' read -A current <<< "$(git -C ${o_registers[barnyard]} log -n 1 --format='%H %at %GF' "$sha1")"
        fi

        if [[ "${#current[@]}" -eq 0 ]]; then
            while read -r line; do
                IFS=' ' read -A fields <<< "$line"
                if [[ "${fields[3]}" == "${o_barnyard[fingerprint]}" ]]; then
                    checkout=("${fields[@]}")
                    break
                fi
            done < <(git -C "${o_registers[barnyard]}" log --format='%H %at %GF')
        else
            while read -r line; do
                IFS=' ' read -A fields <<< "$line"
                if [[ "${fields[3]}" == "${o_barnyard[fingerprint]}" && ${fields[2]} -gt ${current[2]} ]]; then
                    checkout=("${fields[@]}")
                    break
                fi
                if [[ "${fields[1]}" == "${current[1]}" ]]; then
                    break
                fi
            done < <(git -C "${o_registers[barnyard]}" log --format='%H %at %GF')
        fi

        # https://stackoverflow.com/a/21941473
        if [[ "${#checkout[@]}" -ne 0 ]]; then
            o_registers[checkout]="${checkout[1]}"
            o_barnyard[stage]=production

            local list="$(ls "${o_registers[barnyard]}/machines/${o_barnyard[hostname]}")"
            declare -a modules=("${(@f)list}")

            loop_modules "${modules[@]}"

            echo "${checkout[1]}" > "/var/lib/barnyard/sha1/${o_barnyard[hostname]}"
        fi
    fi
}

main "$@"

exit

___ barnyard_run ___
main() {
    source <(awk '/^___ barnyard_common ___/{flag=1;next}/^___/{flag=0}flag' "$1")
    declare -A PRIORITY o_barnyard o_module
    barnyard_read_config PRIORITY "$BARNYARD_TEMP/barnyard/PRIORITY"
    barnyard_read_config o_barnyard "$BARNYARD_TEMP/barnyard/o_barnyard"
    barnyard_read_config o_module "${o_barnyard[barnyard]}/machines/${o_barnyard[hostname]}/${o_barnyard[module]}"
    o_barnyard[resources]="${o_barnyard[barnyard]}/resources/${o_barnyard[hostname]}"
    . "$BARNYARD_TEMP/runs/${o_barnyard[module]}/modules/${o_barnyard[module]}/apply.zsh"
}

main "$@"
___
